package com.github.jochenw.jsgen.api;

import javax.annotation.Nonnull;

import com.github.jochenw.jsgen.util.Objects;


/** This objects defines a {@code do... while} block, which is being generated.
 * Use {@link IBlock#newDoWhile(Object...)}, or {@link IBlock#newDoWhile(Iterable)},
 * to create an instance.
 */
public class DoWhileBlock extends Block<DoWhileBlock> {
	private Object condition;

	/** Specifies the condition elements. The actual condition
	 *   will be generated by concatenating the elements.
	 * @param pValues The condition elements. The actual condition will be generated
	 *   by concatenating the elements.
	 * @return This builder.
	 * @see #condition(Iterable)
	 * @see #getCondition()
	 */
	public DoWhileBlock condition(@Nonnull Object... pValues) {
		assertMutable();
		Objects.requireAllNonNull(pValues, "Values");
		if (condition != null) {
			throw new IllegalStateException("A condition has already been assigned.");
		}
		condition = pValues;
		return this;
	}

	/** Specifies the condition elements. The actual condition
	 *   will be generated by concatenating the elements.
	 * @param pValues The condition elements. The actual condition will be generated
	 *   by concatenating the elements.
	 * @return This builder.
	 * @see #condition(Object...)
	 * @see #getCondition()
	 */
	public DoWhileBlock condition(@Nonnull Iterable<Object> pValues) {
		assertMutable();
		Objects.requireAllNonNull(pValues, "Values");
		if (condition != null) {
			throw new IllegalStateException("A condition has already been assigned.");
		}
		condition = pValues;
		return this;
	}

	/** Returns the condition elements, as specified by invoking {@link #condition(Object...)},
	 * or {@link #condition(Iterable)}.
	 * @return The condition elements. The actual condition will be generated
	 *   by concatenating the elements.
	 * @see #condition(Object...)
	 * @see #comment(Iterable)
	 */
	@Nonnull public Object getCondition() {
		return condition;
	}
}
